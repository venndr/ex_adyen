# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule AdyenForPlatforms:AccountAPI.Api.AccountHolders do
  @moduledoc """
  API calls for all endpoints tagged `AccountHolders`.
  """

  alias AdyenForPlatforms:AccountAPI.Connection
  import AdyenForPlatforms:AccountAPI.RequestBuilder


  @doc """
  post-closeAccountHolder
  Changes the [status of an account holder](https://docs.adyen.com/platforms/account-holders-and-accounts#account-holder-statuses) to **Closed**. This state is final. If an account holder is closed, you can't process transactions, pay out funds, or reopen it. If payments are made to an account of an account holder with a **Closed** status,the payments will be directed to your liable account.

  ## Parameters

  - connection (AdyenForPlatforms:AccountAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (CloseAccountHolderRequest): 
  ## Returns

  {:ok, AdyenForPlatforms:AccountAPI.Model.CloseAccountHolderResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_close_account_holder(Tesla.Env.client, keyword()) :: {:ok, AdyenForPlatforms:AccountAPI.Model.CloseAccountHolderResponse.t} | {:ok, AdyenForPlatforms:AccountAPI.Model.ServiceError.t} | {:error, Tesla.Env.t}
  def post_close_account_holder(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/closeAccountHolder")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdyenForPlatforms:AccountAPI.Model.CloseAccountHolderResponse{}},
      { 202, %AdyenForPlatforms:AccountAPI.Model.CloseAccountHolderResponse{}},
      { 400, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 401, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 403, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 422, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 500, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}}
    ])
  end

  @doc """
  post-closeStores
  Close one or more stores of the account holder.

  ## Parameters

  - connection (AdyenForPlatforms:AccountAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (CloseStoresRequest): 
  ## Returns

  {:ok, AdyenForPlatforms:AccountAPI.Model.GenericResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_close_stores(Tesla.Env.client, keyword()) :: {:ok, AdyenForPlatforms:AccountAPI.Model.ServiceError.t} | {:ok, AdyenForPlatforms:AccountAPI.Model.GenericResponse.t} | {:error, Tesla.Env.t}
  def post_close_stores(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/closeStores")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdyenForPlatforms:AccountAPI.Model.GenericResponse{}},
      { 400, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 401, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 403, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 422, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 500, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}}
    ])
  end

  @doc """
  post-createAccountHolder
  Creates an account holder, which [represents the sub-merchant's entity](https://docs.adyen.com/platforms/account-structure#your-platform) in your platform. The details that you need to provide in the request depend on the sub-merchant's legal entity type. For more information, refer to [Account holder and accounts](https://docs.adyen.com/platforms/account-holders-and-accounts#legal-entity-types).

  ## Parameters

  - connection (AdyenForPlatforms:AccountAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (CreateAccountHolderRequest): 
  ## Returns

  {:ok, AdyenForPlatforms:AccountAPI.Model.CreateAccountHolderResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_create_account_holder(Tesla.Env.client, keyword()) :: {:ok, AdyenForPlatforms:AccountAPI.Model.ServiceError.t} | {:ok, AdyenForPlatforms:AccountAPI.Model.CreateAccountHolderResponse.t} | {:error, Tesla.Env.t}
  def post_create_account_holder(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/createAccountHolder")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdyenForPlatforms:AccountAPI.Model.CreateAccountHolderResponse{}},
      { 400, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 401, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 403, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 422, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 500, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}}
    ])
  end

  @doc """
  post-getAccountHolder
  Retrieves the details of an account holder.

  ## Parameters

  - connection (AdyenForPlatforms:AccountAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (GetAccountHolderRequest): 
  ## Returns

  {:ok, AdyenForPlatforms:AccountAPI.Model.GetAccountHolderResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_get_account_holder(Tesla.Env.client, keyword()) :: {:ok, AdyenForPlatforms:AccountAPI.Model.ServiceError.t} | {:ok, AdyenForPlatforms:AccountAPI.Model.GetAccountHolderResponse.t} | {:error, Tesla.Env.t}
  def post_get_account_holder(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/getAccountHolder")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdyenForPlatforms:AccountAPI.Model.GetAccountHolderResponse{}},
      { 202, %AdyenForPlatforms:AccountAPI.Model.GetAccountHolderResponse{}},
      { 400, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 401, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 403, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 422, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 500, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}}
    ])
  end

  @doc """
  post-getTaxForm
  Generates a tax form for account holders operating in the US. For more information, refer to [Providing tax forms](https://docs.adyen.com/platforms/tax-forms).

  ## Parameters

  - connection (AdyenForPlatforms:AccountAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (GetTaxFormRequest): 
  ## Returns

  {:ok, AdyenForPlatforms:AccountAPI.Model.GetTaxFormResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_get_tax_form(Tesla.Env.client, keyword()) :: {:ok, AdyenForPlatforms:AccountAPI.Model.ServiceError.t} | {:ok, AdyenForPlatforms:AccountAPI.Model.GetTaxFormResponse.t} | {:error, Tesla.Env.t}
  def post_get_tax_form(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/getTaxForm")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdyenForPlatforms:AccountAPI.Model.GetTaxFormResponse{}},
      { 400, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 401, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 403, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 422, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 500, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}}
    ])
  end

  @doc """
  post-suspendAccountHolder
  Changes the [status of an account holder](https://docs.adyen.com/platforms/account-holders-and-accounts#account-holder-statuses) to **Suspended**.

  ## Parameters

  - connection (AdyenForPlatforms:AccountAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (SuspendAccountHolderRequest): 
  ## Returns

  {:ok, AdyenForPlatforms:AccountAPI.Model.SuspendAccountHolderResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_suspend_account_holder(Tesla.Env.client, keyword()) :: {:ok, AdyenForPlatforms:AccountAPI.Model.SuspendAccountHolderResponse.t} | {:ok, AdyenForPlatforms:AccountAPI.Model.ServiceError.t} | {:error, Tesla.Env.t}
  def post_suspend_account_holder(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/suspendAccountHolder")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdyenForPlatforms:AccountAPI.Model.SuspendAccountHolderResponse{}},
      { 202, %AdyenForPlatforms:AccountAPI.Model.SuspendAccountHolderResponse{}},
      { 400, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 401, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 403, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 422, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 500, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}}
    ])
  end

  @doc """
  post-unSuspendAccountHolder
  Changes the [status of an account holder](https://docs.adyen.com/platforms/account-holders-and-accounts#account-holder-statuses) from **Suspended** to **Inactive**. Account holders can have a **Suspended** status if you suspend them through the [`/suspendAccountHolder`](https://docs.adyen.com/api-explorer/#/Account/v5/post/suspendAccountHolder) endpoint or if a KYC deadline expires.  You can only unsuspend account holders if they _do not_ have verification checks with a **FAILED** [`status`](https://docs.adyen.com/api-explorer/#/Account/latest/post/getAccountHolder__resParam_verification-accountHolder-checks-status).

  ## Parameters

  - connection (AdyenForPlatforms:AccountAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (UnSuspendAccountHolderRequest): 
  ## Returns

  {:ok, AdyenForPlatforms:AccountAPI.Model.UnSuspendAccountHolderResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_un_suspend_account_holder(Tesla.Env.client, keyword()) :: {:ok, AdyenForPlatforms:AccountAPI.Model.ServiceError.t} | {:ok, AdyenForPlatforms:AccountAPI.Model.UnSuspendAccountHolderResponse.t} | {:error, Tesla.Env.t}
  def post_un_suspend_account_holder(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/unSuspendAccountHolder")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdyenForPlatforms:AccountAPI.Model.UnSuspendAccountHolderResponse{}},
      { 202, %AdyenForPlatforms:AccountAPI.Model.UnSuspendAccountHolderResponse{}},
      { 400, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 401, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 403, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 422, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 500, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}}
    ])
  end

  @doc """
  post-updateAccountHolder
  Updates the `accountHolderDetails` and `processingTier` of an account holder, and adds bank accounts and shareholders.  When updating `accountHolderDetails`, parameters that are not included in the request are left unchanged except for the objects below.  * `metadata`: Updating the metadata replaces the entire object. This means that to update an existing key-value pair, you must provide the changes along with other existing key-value pairs.  When updating any field in the following objects, you must submit all the fields required for validation.   * `address`  * `fullPhoneNumber`  * `bankAccountDetails.BankAccountDetail`  * `businessDetails.shareholders.ShareholderContact`   For example, to update the `address.postalCode`, you must also submit the `address.country`, `.city`, `.street`, `.postalCode`, and possibly `.stateOrProvince` so that the address can be validated.  To add a bank account or shareholder, provide the bank account or shareholder details without a `bankAccountUUID` or a `shareholderCode`.  

  ## Parameters

  - connection (AdyenForPlatforms:AccountAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (UpdateAccountHolderRequest): 
  ## Returns

  {:ok, AdyenForPlatforms:AccountAPI.Model.UpdateAccountHolderResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_update_account_holder(Tesla.Env.client, keyword()) :: {:ok, AdyenForPlatforms:AccountAPI.Model.UpdateAccountHolderResponse.t} | {:ok, AdyenForPlatforms:AccountAPI.Model.ServiceError.t} | {:error, Tesla.Env.t}
  def post_update_account_holder(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/updateAccountHolder")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdyenForPlatforms:AccountAPI.Model.UpdateAccountHolderResponse{}},
      { 202, %AdyenForPlatforms:AccountAPI.Model.UpdateAccountHolderResponse{}},
      { 400, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 401, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 403, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 422, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 500, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}}
    ])
  end

  @doc """
  post-updateAccountHolderState
  Disables or enables the processing or payout state of an account holder.

  ## Parameters

  - connection (AdyenForPlatforms:AccountAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (UpdateAccountHolderStateRequest): 
  ## Returns

  {:ok, AdyenForPlatforms:AccountAPI.Model.GetAccountHolderStatusResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_update_account_holder_state(Tesla.Env.client, keyword()) :: {:ok, AdyenForPlatforms:AccountAPI.Model.ServiceError.t} | {:ok, AdyenForPlatforms:AccountAPI.Model.GetAccountHolderStatusResponse.t} | {:error, Tesla.Env.t}
  def post_update_account_holder_state(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/updateAccountHolderState")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdyenForPlatforms:AccountAPI.Model.GetAccountHolderStatusResponse{}},
      { 202, %AdyenForPlatforms:AccountAPI.Model.GetAccountHolderStatusResponse{}},
      { 400, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 401, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 403, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 422, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}},
      { 500, %AdyenForPlatforms:AccountAPI.Model.ServiceError{}}
    ])
  end
end
