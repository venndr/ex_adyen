# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule Adyen.Api.PaymentInstrumentGroups do
  @moduledoc """
  API calls for all endpoints tagged `PaymentInstrumentGroups`.
  """

  alias Adyen.Connection
  import Adyen.RequestBuilder


  @doc """
  get-paymentInstrumentGroups-id
  Returns a specific payment instrument group.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - id (String.t): Unique identifier of the payment instrument group.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Adyen.Model.PaymentInstrumentGroup.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_payment_instrument_groups_id(Tesla.Env.client, String.t, keyword()) :: {:ok, Adyen.Model.PaymentInstrumentGroup.t} | {:ok, Adyen.Model.RestServiceError.t} | {:error, Tesla.Env.t}
  def get_payment_instrument_groups_id(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/paymentInstrumentGroups/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.PaymentInstrumentGroup{}},
      { 400, %Adyen.Model.RestServiceError{}},
      { 401, %Adyen.Model.RestServiceError{}},
      { 403, %Adyen.Model.RestServiceError{}},
      { 422, %Adyen.Model.RestServiceError{}},
      { 500, %Adyen.Model.RestServiceError{}}
    ])
  end

  @doc """
  get-paymentInstrumentGroups-id-transactionRules
  Returns a list of all the transaction rules associated with a specific payment instrument group.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - id (String.t): Unique identifier of the payment instrument group.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Adyen.Model.TransactionRulesResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_payment_instrument_groups_id_transaction_rules(Tesla.Env.client, String.t, keyword()) :: {:ok, Adyen.Model.RestServiceError.t} | {:ok, Adyen.Model.TransactionRulesResponse.t} | {:error, Tesla.Env.t}
  def get_payment_instrument_groups_id_transaction_rules(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/paymentInstrumentGroups/#{id}/transactionRules")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.TransactionRulesResponse{}},
      { 400, %Adyen.Model.RestServiceError{}},
      { 401, %Adyen.Model.RestServiceError{}},
      { 403, %Adyen.Model.RestServiceError{}},
      { 422, %Adyen.Model.RestServiceError{}},
      { 500, %Adyen.Model.RestServiceError{}}
    ])
  end

  @doc """
  post-paymentInstrumentGroups
  Creates a payment instrument group, which you use to associate and group payment instrument resources together. You can apply a transaction rule to a payment instrument group.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (PaymentInstrumentGroupInfo): 
  ## Returns

  {:ok, Adyen.Model.PaymentInstrumentGroup.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_payment_instrument_groups(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.PaymentInstrumentGroup.t} | {:ok, Adyen.Model.RestServiceError.t} | {:error, Tesla.Env.t}
  def post_payment_instrument_groups(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/paymentInstrumentGroups")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.PaymentInstrumentGroup{}},
      { 400, %Adyen.Model.RestServiceError{}},
      { 401, %Adyen.Model.RestServiceError{}},
      { 403, %Adyen.Model.RestServiceError{}},
      { 422, %Adyen.Model.RestServiceError{}},
      { 500, %Adyen.Model.RestServiceError{}}
    ])
  end
end
