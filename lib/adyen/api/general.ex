# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule Adyen.Api.General do
  @moduledoc """
  API calls for all endpoints tagged `General`.
  """

  alias Adyen.Connection
  import Adyen.RequestBuilder


  @doc """
  get-balancePlatforms-id
  Returns a specific balance platform.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - id (String.t): Unique identifier of the balance platform.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Adyen.Model.BalancePlatform.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_balance_platforms_id(Tesla.Env.client, String.t, keyword()) :: {:ok, Adyen.Model.RestServiceError.t} | {:ok, Adyen.Model.BalancePlatform.t} | {:error, Tesla.Env.t}
  def get_balance_platforms_id(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/balancePlatforms/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.BalancePlatform{}},
      { 400, %Adyen.Model.RestServiceError{}},
      { 401, %Adyen.Model.RestServiceError{}},
      { 403, %Adyen.Model.RestServiceError{}},
      { 422, %Adyen.Model.RestServiceError{}},
      { 500, %Adyen.Model.RestServiceError{}}
    ])
  end

  @doc """
  get-balancePlatforms-id-accountHolders
  Returns a paginated list of all the account holders that belong to the balance platform. To fetch multiple pages, use the query parameters.  For example, to limit the page to 5 account holders and to skip the first 20: `/balancePlatforms/{id}/accountHolders?limit=5&offset=20`.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - id (String.t): Unique identifier of the balance platform.
  - opts (KeywordList): [optional] Optional parameters
    - :offset (integer()): The number of items that you want to skip.
    - :limit (integer()): The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page.
  ## Returns

  {:ok, Adyen.Model.PaginatedAccountHoldersResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_balance_platforms_id_account_holders(Tesla.Env.client, String.t, keyword()) :: {:ok, Adyen.Model.RestServiceError.t} | {:ok, Adyen.Model.PaginatedAccountHoldersResponse.t} | {:error, Tesla.Env.t}
  def get_balance_platforms_id_account_holders(connection, id, opts \\ []) do
    optional_params = %{
      :"offset" => :query,
      :"limit" => :query
    }
    %{}
    |> method(:get)
    |> url("/balancePlatforms/#{id}/accountHolders")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.PaginatedAccountHoldersResponse{}},
      { 400, %Adyen.Model.RestServiceError{}},
      { 401, %Adyen.Model.RestServiceError{}},
      { 403, %Adyen.Model.RestServiceError{}},
      { 422, %Adyen.Model.RestServiceError{}},
      { 500, %Adyen.Model.RestServiceError{}}
    ])
  end

  @doc """
  post-accountHolderBalance
  This endpoint is used to retrieve the balance(s) of the accounts of an account holder. An account's balances are on a per-currency basis (i.e., an account may have multiple balances: one per currency).

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (AccountHolderBalanceRequest): 
  ## Returns

  {:ok, Adyen.Model.AccountHolderBalanceResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_account_holder_balance(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.AccountHolderBalanceResponse.t} | {:ok, Adyen.Model.ServiceError.t} | {:error, Tesla.Env.t}
  def post_account_holder_balance(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/accountHolderBalance")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.AccountHolderBalanceResponse{}},
      { 400, %Adyen.Model.ServiceError{}},
      { 401, %Adyen.Model.ServiceError{}},
      { 403, %Adyen.Model.ServiceError{}},
      { 422, %Adyen.Model.ServiceError{}},
      { 500, %Adyen.Model.ServiceError{}}
    ])
  end

  @doc """
  post-accountHolderTransactionList
  This endpoint is used to retrieve a list of Transactions for an account holder's accounts. The accounts and Transaction Statuses to be included on the list can be specified. Each call will return a maximum of fifty (50) Transactions per account; in order to retrieve the following set of Transactions another call should be made with the 'page' value incremented. Note that Transactions are ordered with most recent first.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (AccountHolderTransactionListRequest): 
  ## Returns

  {:ok, Adyen.Model.AccountHolderTransactionListResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_account_holder_transaction_list(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.AccountHolderTransactionListResponse.t} | {:ok, Adyen.Model.ServiceError.t} | {:error, Tesla.Env.t}
  def post_account_holder_transaction_list(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/accountHolderTransactionList")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.AccountHolderTransactionListResponse{}},
      { 400, %Adyen.Model.ServiceError{}},
      { 401, %Adyen.Model.ServiceError{}},
      { 403, %Adyen.Model.ServiceError{}},
      { 422, %Adyen.Model.ServiceError{}},
      { 500, %Adyen.Model.ServiceError{}}
    ])
  end

  @doc """
  post-authorise
  Creates a payment with a unique reference (`pspReference`) and attempts to obtain an authorisation hold. For cards, this amount can be captured or cancelled later. Non-card payment methods typically don't support this and will automatically capture as part of the authorisation. > This endpoint is part of our [classic API integration](https://docs.adyen.com/online-payments/classic-integrations/api-integration-ecommerce). If using a [newer integration](https://docs.adyen.com/online-payments), use the [`/payments`](https://docs.adyen.com/api-explorer/#/CheckoutService/payments) endpoint under Checkout API instead.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (PaymentRequest1): 
  ## Returns

  {:ok, Adyen.Model.PaymentResult.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_authorise(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.ServiceError1.t} | {:ok, Adyen.Model.PaymentResult.t} | {:error, Tesla.Env.t}
  def post_authorise(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/authorise")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.PaymentResult{}},
      { 400, %Adyen.Model.ServiceError1{}},
      { 401, %Adyen.Model.ServiceError1{}},
      { 403, %Adyen.Model.ServiceError1{}},
      { 422, %Adyen.Model.ServiceError1{}},
      { 500, %Adyen.Model.ServiceError1{}}
    ])
  end

  @doc """
  post-authorise3d
  For an authenticated 3D Secure session, completes the payment authorisation. This endpoint must receive the `md` and `paResponse` parameters that you get from the card issuer after a shopper pays via 3D Secure.  > This endpoint is part of our [classic API integration](https://docs.adyen.com/online-payments/classic-integrations/api-integration-ecommerce/3d-secure). If using a [newer integration](https://docs.adyen.com/online-payments), use the [`/payments/details`](https://docs.adyen.com/api-explorer/#/CheckoutService/payments/details) endpoint under Checkout API instead.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (PaymentRequest3d): 
  ## Returns

  {:ok, Adyen.Model.PaymentResult.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_authorise3d(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.ServiceError1.t} | {:ok, Adyen.Model.PaymentResult.t} | {:error, Tesla.Env.t}
  def post_authorise3d(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/authorise3d")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.PaymentResult{}},
      { 400, %Adyen.Model.ServiceError1{}},
      { 401, %Adyen.Model.ServiceError1{}},
      { 403, %Adyen.Model.ServiceError1{}},
      { 422, %Adyen.Model.ServiceError1{}},
      { 500, %Adyen.Model.ServiceError1{}}
    ])
  end

  @doc """
  post-authorise3ds2
  For an authenticated 3D Secure 2 session, completes the payment authorisation. This endpoint must receive the `threeDS2Token` and `threeDS2Result` parameters.  > This endpoint is part of our [classic API integration](https://docs.adyen.com/online-payments/classic-integrations/api-integration-ecommerce/3d-secure). If using a [newer integration](https://docs.adyen.com/online-payments), use the [`/payments/details`](https://docs.adyen.com/api-explorer/#/CheckoutService/payments/details) endpoint under Checkout API instead.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (PaymentRequest3ds2): 
  ## Returns

  {:ok, Adyen.Model.PaymentResult.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_authorise3ds2(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.ServiceError1.t} | {:ok, Adyen.Model.PaymentResult.t} | {:error, Tesla.Env.t}
  def post_authorise3ds2(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/authorise3ds2")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.PaymentResult{}},
      { 400, %Adyen.Model.ServiceError1{}},
      { 401, %Adyen.Model.ServiceError1{}},
      { 403, %Adyen.Model.ServiceError1{}},
      { 422, %Adyen.Model.ServiceError1{}},
      { 500, %Adyen.Model.ServiceError1{}}
    ])
  end

  @doc """
  post-createNotificationConfiguration
  Creates a subscription to notifications informing you of events on your platform. After the subscription is created, the events specified in the configuration will be sent to the URL specified in the configuration. Subscriptions must be configured on a per-event basis (as opposed to, for example, a per-account holder basis), so all event notifications of a marketplace and of a given type will be sent to the same endpoint(s). A marketplace may have multiple endpoints if desired; an event notification may be sent to as many or as few different endpoints as configured.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (CreateNotificationConfigurationRequest): 
  ## Returns

  {:ok, Adyen.Model.GetNotificationConfigurationResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_create_notification_configuration(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.ServiceError.t} | {:ok, Adyen.Model.GetNotificationConfigurationResponse.t} | {:error, Tesla.Env.t}
  def post_create_notification_configuration(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/createNotificationConfiguration")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.GetNotificationConfigurationResponse{}},
      { 400, %Adyen.Model.ServiceError{}},
      { 401, %Adyen.Model.ServiceError{}},
      { 403, %Adyen.Model.ServiceError{}},
      { 422, %Adyen.Model.ServiceError{}},
      { 500, %Adyen.Model.ServiceError{}}
    ])
  end

  @doc """
  post-createTestCardRanges
  Creates one or more test card ranges.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (CreateTestCardRangesRequest): 
  ## Returns

  {:ok, Adyen.Model.CreateTestCardRangesResult.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_create_test_card_ranges(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.CreateTestCardRangesResult.t} | {:ok, Adyen.Model.ServiceError.t} | {:error, Tesla.Env.t}
  def post_create_test_card_ranges(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/createTestCardRanges")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.CreateTestCardRangesResult{}},
      { 400, %Adyen.Model.ServiceError{}},
      { 401, %Adyen.Model.ServiceError{}},
      { 403, %Adyen.Model.ServiceError{}},
      { 422, %Adyen.Model.ServiceError{}},
      { 500, %Adyen.Model.ServiceError{}}
    ])
  end

  @doc """
  post-debitAccountHolder
  Sends a direct debit request to an account holder's bank account. If the direct debit is successful, the funds are settled in the accounts specified in the split instructions. Adyen sends the result of the direct debit in a [`DIRECT_DEBIT_INITIATED`](https://docs.adyen.com/api-explorer/#/NotificationService/latest/post/DIRECT_DEBIT_INITIATED) notification webhook.   To learn more about use cases, refer to [Top up accounts](https://docs.adyen.com/platforms/top-up-accounts).

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (DebitAccountHolderRequest): 
  ## Returns

  {:ok, Adyen.Model.DebitAccountHolderResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_debit_account_holder(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.DebitAccountHolderResponse.t} | {:ok, Adyen.Model.ServiceError.t} | {:error, Tesla.Env.t}
  def post_debit_account_holder(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/debitAccountHolder")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.DebitAccountHolderResponse{}},
      { 202, %Adyen.Model.DebitAccountHolderResponse{}},
      { 400, %Adyen.Model.ServiceError{}},
      { 401, %Adyen.Model.ServiceError{}},
      { 403, %Adyen.Model.ServiceError{}},
      { 422, %Adyen.Model.ServiceError{}},
      { 500, %Adyen.Model.ServiceError{}}
    ])
  end

  @doc """
  post-deleteNotificationConfigurations
  This endpoint is used to delete an existing notification subscription configuration. After the subscription is deleted, no further event notifications will be sent to the URL that was in the subscription.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (DeleteNotificationConfigurationRequest): 
  ## Returns

  {:ok, Adyen.Model.GenericResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_delete_notification_configurations(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.GenericResponse.t} | {:ok, Adyen.Model.ServiceError.t} | {:error, Tesla.Env.t}
  def post_delete_notification_configurations(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/deleteNotificationConfigurations")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.GenericResponse{}},
      { 400, %Adyen.Model.ServiceError{}},
      { 401, %Adyen.Model.ServiceError{}},
      { 403, %Adyen.Model.ServiceError{}},
      { 422, %Adyen.Model.ServiceError{}},
      { 500, %Adyen.Model.ServiceError{}}
    ])
  end

  @doc """
  post-disable
  Disables stored payment details to stop charging a shopper with this particular recurring detail ID.  For more information, refer to [Disable stored details](https://docs.adyen.com/classic-integration/recurring-payments/disable-stored-details/).

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (DisableRequest): 
  ## Returns

  {:ok, Adyen.Model.DisableResult.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_disable(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.ServiceError1.t} | {:ok, Adyen.Model.DisableResult.t} | {:error, Tesla.Env.t}
  def post_disable(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/disable")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.DisableResult{}},
      { 400, %Adyen.Model.ServiceError1{}},
      { 401, %Adyen.Model.ServiceError1{}},
      { 403, %Adyen.Model.ServiceError1{}},
      { 422, %Adyen.Model.ServiceError1{}},
      { 500, %Adyen.Model.ServiceError1{}}
    ])
  end

  @doc """
  post-get3dsAvailability
  Verifies whether 3D Secure is available for the specified BIN or card brand. For 3D Secure 2, this endpoint also returns device fingerprinting keys.  For more information, refer to [3D Secure 2](https://docs.adyen.com/online-payments/3d-secure/native-3ds2).

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (ThreeDsAvailabilityRequest): 
  ## Returns

  {:ok, Adyen.Model.ThreeDsAvailabilityResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_get3ds_availability(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.ServiceError1.t} | {:ok, Adyen.Model.ThreeDsAvailabilityResponse.t} | {:error, Tesla.Env.t}
  def post_get3ds_availability(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/get3dsAvailability")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.ThreeDsAvailabilityResponse{}},
      { 400, %Adyen.Model.ServiceError1{}},
      { 401, %Adyen.Model.ServiceError1{}},
      { 403, %Adyen.Model.ServiceError1{}},
      { 422, %Adyen.Model.ServiceError1{}},
      { 500, %Adyen.Model.ServiceError1{}}
    ])
  end

  @doc """
  post-getAuthenticationResult
  Return the authentication result after doing a 3D Secure authentication only.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (AuthenticationResultRequest): 
  ## Returns

  {:ok, Adyen.Model.AuthenticationResultResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_get_authentication_result(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.ServiceError1.t} | {:ok, Adyen.Model.AuthenticationResultResponse.t} | {:error, Tesla.Env.t}
  def post_get_authentication_result(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/getAuthenticationResult")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.AuthenticationResultResponse{}},
      { 400, %Adyen.Model.ServiceError1{}},
      { 401, %Adyen.Model.ServiceError1{}},
      { 403, %Adyen.Model.ServiceError1{}},
      { 422, %Adyen.Model.ServiceError1{}},
      { 500, %Adyen.Model.ServiceError1{}}
    ])
  end

  @doc """
  post-getCostEstimate
  Use the Adyen Cost Estimation API to pre-calculate interchange and scheme fee costs. Knowing these costs prior actual payment authorisation gives you an opportunity to charge those costs to the cardholder, if necessary.  To retrieve this information, make the call to the `/getCostEstimate` endpoint. The response to this call contains the amount of the interchange and scheme fees charged by the network for this transaction, and also which surcharging policy is possible (based on current regulations).  > Since not all information is known in advance (for example, if the cardholder will successfully authenticate via 3D Secure or if you also plan to provide additional Level 2/3 data), the returned amounts are based on a set of assumption criteria you define in the `assumptions` parameter.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (CostEstimateRequest): 
  ## Returns

  {:ok, Adyen.Model.CostEstimateResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_get_cost_estimate(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.ServiceError1.t} | {:ok, Adyen.Model.CostEstimateResponse.t} | {:error, Tesla.Env.t}
  def post_get_cost_estimate(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/getCostEstimate")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.CostEstimateResponse{}},
      { 400, %Adyen.Model.ServiceError1{}},
      { 401, %Adyen.Model.ServiceError1{}},
      { 403, %Adyen.Model.ServiceError1{}},
      { 422, %Adyen.Model.ServiceError1{}},
      { 500, %Adyen.Model.ServiceError1{}}
    ])
  end

  @doc """
  post-getNotificationConfiguration
  This endpoint is used to retrieve the details of the configuration of a notification subscription.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (GetNotificationConfigurationRequest): 
  ## Returns

  {:ok, Adyen.Model.GetNotificationConfigurationResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_get_notification_configuration(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.ServiceError.t} | {:ok, Adyen.Model.GetNotificationConfigurationResponse.t} | {:error, Tesla.Env.t}
  def post_get_notification_configuration(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/getNotificationConfiguration")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.GetNotificationConfigurationResponse{}},
      { 400, %Adyen.Model.ServiceError{}},
      { 401, %Adyen.Model.ServiceError{}},
      { 403, %Adyen.Model.ServiceError{}},
      { 422, %Adyen.Model.ServiceError{}},
      { 500, %Adyen.Model.ServiceError{}}
    ])
  end

  @doc """
  post-getNotificationConfigurationList
  This endpoint is used to retrieve the details of the configurations of all of the notification subscriptions in the marketplace of the executing user.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (map()): 
  ## Returns

  {:ok, Adyen.Model.GetNotificationConfigurationListResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_get_notification_configuration_list(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.ServiceError.t} | {:ok, Adyen.Model.GetNotificationConfigurationListResponse.t} | {:error, Tesla.Env.t}
  def post_get_notification_configuration_list(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/getNotificationConfigurationList")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.GetNotificationConfigurationListResponse{}},
      { 400, %Adyen.Model.ServiceError{}},
      { 401, %Adyen.Model.ServiceError{}},
      { 403, %Adyen.Model.ServiceError{}},
      { 422, %Adyen.Model.ServiceError{}},
      { 500, %Adyen.Model.ServiceError{}}
    ])
  end

  @doc """
  post-listRecurringDetails
  Lists the stored payment details for a shopper, if there are any available. The recurring detail ID can be used with a regular authorisation request to charge the shopper. A summary of the payment detail is returned for presentation to the shopper.  For more information, refer to [Retrieve stored details](https://docs.adyen.com/classic-integration/recurring-payments/retrieve-stored-details/).

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (RecurringDetailsRequest): 
  ## Returns

  {:ok, Adyen.Model.RecurringDetailsResult.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_list_recurring_details(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.ServiceError1.t} | {:ok, Adyen.Model.RecurringDetailsResult.t} | {:error, Tesla.Env.t}
  def post_list_recurring_details(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/listRecurringDetails")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.RecurringDetailsResult{}},
      { 400, %Adyen.Model.ServiceError1{}},
      { 401, %Adyen.Model.ServiceError1{}},
      { 403, %Adyen.Model.ServiceError1{}},
      { 422, %Adyen.Model.ServiceError1{}},
      { 500, %Adyen.Model.ServiceError1{}}
    ])
  end

  @doc """
  post-payoutAccountHolder
  This endpoint is used to pay out a specified amount from an account to the bank account of the account's account holder.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (PayoutAccountHolderRequest): 
  ## Returns

  {:ok, Adyen.Model.PayoutAccountHolderResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_payout_account_holder(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.PayoutAccountHolderResponse.t} | {:ok, Adyen.Model.ServiceError.t} | {:error, Tesla.Env.t}
  def post_payout_account_holder(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/payoutAccountHolder")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.PayoutAccountHolderResponse{}},
      { 202, %Adyen.Model.PayoutAccountHolderResponse{}},
      { 400, %Adyen.Model.ServiceError{}},
      { 401, %Adyen.Model.ServiceError{}},
      { 403, %Adyen.Model.ServiceError{}},
      { 422, %Adyen.Model.ServiceError{}},
      { 500, %Adyen.Model.ServiceError{}}
    ])
  end

  @doc """
  post-refundFundsTransfer
  This endpoint is used to refund funds transferred from one account to another. Both accounts must be in the same marketplace, but can have different account holders.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (RefundFundsTransferRequest): 
  ## Returns

  {:ok, Adyen.Model.RefundFundsTransferResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_refund_funds_transfer(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.RefundFundsTransferResponse.t} | {:ok, Adyen.Model.ServiceError.t} | {:error, Tesla.Env.t}
  def post_refund_funds_transfer(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/refundFundsTransfer")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.RefundFundsTransferResponse{}},
      { 202, %Adyen.Model.RefundFundsTransferResponse{}},
      { 400, %Adyen.Model.ServiceError{}},
      { 401, %Adyen.Model.ServiceError{}},
      { 403, %Adyen.Model.ServiceError{}},
      { 422, %Adyen.Model.ServiceError{}},
      { 500, %Adyen.Model.ServiceError{}}
    ])
  end

  @doc """
  post-refundNotPaidOutTransfers
  This endpoint is used to refund all the transactions of an account which have taken place since the most recent payout. This request is on a per-account basis (as opposed to a per-payment basis), so only the portion of the payment which was made to the specified account will be refunded. The commission(s), fee(s), and payment(s) to other account(s), will remain in the accounts to which they were sent as designated by the original payment's split details.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (RefundNotPaidOutTransfersRequest): 
  ## Returns

  {:ok, Adyen.Model.RefundNotPaidOutTransfersResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_refund_not_paid_out_transfers(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.RefundNotPaidOutTransfersResponse.t} | {:ok, Adyen.Model.ServiceError.t} | {:error, Tesla.Env.t}
  def post_refund_not_paid_out_transfers(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/refundNotPaidOutTransfers")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.RefundNotPaidOutTransfersResponse{}},
      { 202, %Adyen.Model.RefundNotPaidOutTransfersResponse{}},
      { 400, %Adyen.Model.ServiceError{}},
      { 401, %Adyen.Model.ServiceError{}},
      { 403, %Adyen.Model.ServiceError{}},
      { 422, %Adyen.Model.ServiceError{}},
      { 500, %Adyen.Model.ServiceError{}}
    ])
  end

  @doc """
  post-retrieve3ds2Result
  Retrieves the `threeDS2Result` after doing a 3D Secure 2 authentication only.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (ThreeDs2ResultRequest): 
  ## Returns

  {:ok, Adyen.Model.ThreeDs2ResultResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_retrieve3ds2_result(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.ServiceError1.t} | {:ok, Adyen.Model.ThreeDs2ResultResponse.t} | {:error, Tesla.Env.t}
  def post_retrieve3ds2_result(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/retrieve3ds2Result")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.ThreeDs2ResultResponse{}},
      { 400, %Adyen.Model.ServiceError1{}},
      { 401, %Adyen.Model.ServiceError1{}},
      { 403, %Adyen.Model.ServiceError1{}},
      { 422, %Adyen.Model.ServiceError1{}},
      { 500, %Adyen.Model.ServiceError1{}}
    ])
  end

  @doc """
  post-scheduleAccountUpdater
  When making the API call, you can submit either the credit card information, or the recurring detail reference and the shopper reference: * If the card information is provided, all the sub-fields for `card` are mandatory. * If the recurring detail reference is provided, the fields for `shopperReference` and `selectedRecurringDetailReference` are mandatory.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (ScheduleAccountUpdaterRequest): 
  ## Returns

  {:ok, Adyen.Model.ScheduleAccountUpdaterResult.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_schedule_account_updater(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.ServiceError1.t} | {:ok, Adyen.Model.ScheduleAccountUpdaterResult.t} | {:error, Tesla.Env.t}
  def post_schedule_account_updater(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/scheduleAccountUpdater")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.ScheduleAccountUpdaterResult{}},
      { 400, %Adyen.Model.ServiceError1{}},
      { 401, %Adyen.Model.ServiceError1{}},
      { 403, %Adyen.Model.ServiceError1{}},
      { 422, %Adyen.Model.ServiceError1{}},
      { 500, %Adyen.Model.ServiceError1{}}
    ])
  end

  @doc """
  post-setupBeneficiary
  This endpoint is used to define a benefactor and a beneficiary relationship between two accounts. At the time of benefactor/beneficiary setup, the funds in the benefactor account are transferred to the beneficiary account, and any further payments to the benefactor account are automatically sent to the beneficiary account. Note that a series of benefactor/beneficiaries may not exceed four (4) beneficiaries and may not have a cycle in it.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (SetupBeneficiaryRequest): 
  ## Returns

  {:ok, Adyen.Model.SetupBeneficiaryResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_setup_beneficiary(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.SetupBeneficiaryResponse.t} | {:ok, Adyen.Model.ServiceError.t} | {:error, Tesla.Env.t}
  def post_setup_beneficiary(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/setupBeneficiary")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.SetupBeneficiaryResponse{}},
      { 202, %Adyen.Model.SetupBeneficiaryResponse{}},
      { 400, %Adyen.Model.ServiceError{}},
      { 401, %Adyen.Model.ServiceError{}},
      { 403, %Adyen.Model.ServiceError{}},
      { 422, %Adyen.Model.ServiceError{}},
      { 500, %Adyen.Model.ServiceError{}}
    ])
  end

  @doc """
  post-testNotificationConfiguration
  This endpoint is used to test an existing notification subscription configuration. For each event type specified, a test notification will be generated and sent to the URL configured in the subscription specified.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (TestNotificationConfigurationRequest): 
  ## Returns

  {:ok, Adyen.Model.TestNotificationConfigurationResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_test_notification_configuration(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.TestNotificationConfigurationResponse.t} | {:ok, Adyen.Model.ServiceError.t} | {:error, Tesla.Env.t}
  def post_test_notification_configuration(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/testNotificationConfiguration")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.TestNotificationConfigurationResponse{}},
      { 400, %Adyen.Model.ServiceError{}},
      { 401, %Adyen.Model.ServiceError{}},
      { 403, %Adyen.Model.ServiceError{}},
      { 422, %Adyen.Model.ServiceError{}},
      { 500, %Adyen.Model.ServiceError{}}
    ])
  end

  @doc """
  post-transferFunds
  This endpoint is used to transfer funds from one account to another account. Both accounts must be in the same marketplace, but can have different account holders. The transfer must include a transfer code, which should be determined by the marketplace, in compliance with local regulations.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (TransferFundsRequest): 
  ## Returns

  {:ok, Adyen.Model.TransferFundsResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_transfer_funds(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.TransferFundsResponse.t} | {:ok, Adyen.Model.ServiceError.t} | {:error, Tesla.Env.t}
  def post_transfer_funds(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/transferFunds")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.TransferFundsResponse{}},
      { 202, %Adyen.Model.TransferFundsResponse{}},
      { 400, %Adyen.Model.ServiceError{}},
      { 401, %Adyen.Model.ServiceError{}},
      { 403, %Adyen.Model.ServiceError{}},
      { 422, %Adyen.Model.ServiceError{}},
      { 500, %Adyen.Model.ServiceError{}}
    ])
  end

  @doc """
  post-updateNotificationConfiguration
  This endpoint is used to update an existing notification subscription configuration. If updating the event types, all event types desired must be provided, otherwise the previous event type configuration will be overwritten.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (UpdateNotificationConfigurationRequest): 
  ## Returns

  {:ok, Adyen.Model.GetNotificationConfigurationResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_update_notification_configuration(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.ServiceError.t} | {:ok, Adyen.Model.GetNotificationConfigurationResponse.t} | {:error, Tesla.Env.t}
  def post_update_notification_configuration(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/updateNotificationConfiguration")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.GetNotificationConfigurationResponse{}},
      { 400, %Adyen.Model.ServiceError{}},
      { 401, %Adyen.Model.ServiceError{}},
      { 403, %Adyen.Model.ServiceError{}},
      { 422, %Adyen.Model.ServiceError{}},
      { 500, %Adyen.Model.ServiceError{}}
    ])
  end
end
