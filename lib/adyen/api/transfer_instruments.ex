# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule Adyen.Api.TransferInstruments do
  @moduledoc """
  API calls for all endpoints tagged `TransferInstruments`.
  """

  alias Adyen.Connection
  import Adyen.RequestBuilder


  @doc """
  delete-transferInstruments-id
  Deletes a transfer instrument.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - id (String.t): Unique identifier of the transfer instrument to be deleted.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, map()} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_transfer_instruments_id(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:ok, Adyen.Model.ServiceError.t} | {:error, Tesla.Env.t}
  def delete_transfer_instruments_id(connection, id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/transferInstruments/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %{}},
      { 400, %Adyen.Model.ServiceError{}},
      { 401, %Adyen.Model.ServiceError{}},
      { 403, %Adyen.Model.ServiceError{}},
      { 422, %Adyen.Model.ServiceError{}},
      { 500, %Adyen.Model.ServiceError{}}
    ])
  end

  @doc """
  get-transferInstruments-id
  Returns a specific transfer instrument.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - id (String.t): Unique identifier of the transfer instrument.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Adyen.Model.TransferInstrument.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_transfer_instruments_id(Tesla.Env.client, String.t, keyword()) :: {:ok, Adyen.Model.TransferInstrument.t} | {:ok, Adyen.Model.ServiceError.t} | {:error, Tesla.Env.t}
  def get_transfer_instruments_id(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/transferInstruments/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.TransferInstrument{}},
      { 400, %Adyen.Model.ServiceError{}},
      { 401, %Adyen.Model.ServiceError{}},
      { 403, %Adyen.Model.ServiceError{}},
      { 422, %Adyen.Model.ServiceError{}},
      { 500, %Adyen.Model.ServiceError{}}
    ])
  end

  @doc """
  patch-transferInstruments-id
  Updates a transfer instrument.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - id (String.t): Unique identifier of the transfer instrument.
  - opts (KeywordList): [optional] Optional parameters
    - :body (TransferInstrumentInfo): 
  ## Returns

  {:ok, Adyen.Model.TransferInstrument.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec patch_transfer_instruments_id(Tesla.Env.client, String.t, keyword()) :: {:ok, Adyen.Model.TransferInstrument.t} | {:ok, Adyen.Model.ServiceError.t} | {:error, Tesla.Env.t}
  def patch_transfer_instruments_id(connection, id, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:patch)
    |> url("/transferInstruments/#{id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.TransferInstrument{}},
      { 400, %Adyen.Model.ServiceError{}},
      { 401, %Adyen.Model.ServiceError{}},
      { 403, %Adyen.Model.ServiceError{}},
      { 422, %Adyen.Model.ServiceError{}},
      { 500, %Adyen.Model.ServiceError{}}
    ])
  end

  @doc """
  post-transferInstruments
  Creates a transfer instrument. A transfer instrument is a bank account or other payment details that a legal entity owns. Adyen performs Know Your Customer (KYC) checks on the transfer instrument as required by payment industry regulations. Your Adyen contact will inform you of the status and results of the KYC checks.  When the transfer instrument passes the verification checks, you can start sending funds from the balance platform to the transfer instrument (such as payouts).

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (TransferInstrumentInfo): 
  ## Returns

  {:ok, Adyen.Model.TransferInstrument.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_transfer_instruments(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.TransferInstrument.t} | {:ok, Adyen.Model.ServiceError.t} | {:error, Tesla.Env.t}
  def post_transfer_instruments(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/transferInstruments")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.TransferInstrument{}},
      { 400, %Adyen.Model.ServiceError{}},
      { 401, %Adyen.Model.ServiceError{}},
      { 403, %Adyen.Model.ServiceError{}},
      { 422, %Adyen.Model.ServiceError{}},
      { 500, %Adyen.Model.ServiceError{}}
    ])
  end
end
