# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule Adyen.Api.TransactionRules do
  @moduledoc """
  API calls for all endpoints tagged `TransactionRules`.
  """

  alias Adyen.Connection
  import Adyen.RequestBuilder


  @doc """
  delete-transactionRules-transactionRuleId
  Deletes a transaction rule.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - transaction_rule_id (String.t): Unique identifier of the transaction rule.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Adyen.Model.TransactionRule.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_transaction_rules_transaction_rule_id(Tesla.Env.client, String.t, keyword()) :: {:ok, Adyen.Model.RestServiceError.t} | {:ok, Adyen.Model.TransactionRule.t} | {:error, Tesla.Env.t}
  def delete_transaction_rules_transaction_rule_id(connection, transaction_rule_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/transactionRules/#{transaction_rule_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.TransactionRule{}},
      { 400, %Adyen.Model.RestServiceError{}},
      { 401, %Adyen.Model.RestServiceError{}},
      { 403, %Adyen.Model.RestServiceError{}},
      { 422, %Adyen.Model.RestServiceError{}},
      { 500, %Adyen.Model.RestServiceError{}}
    ])
  end

  @doc """
  get-transactionRules-transactionRuleId
  Returns a specific transaction rule.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - transaction_rule_id (String.t): Unique identifier of the transaction rule.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Adyen.Model.TransactionRuleResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_transaction_rules_transaction_rule_id(Tesla.Env.client, String.t, keyword()) :: {:ok, Adyen.Model.TransactionRuleResponse.t} | {:ok, Adyen.Model.RestServiceError.t} | {:error, Tesla.Env.t}
  def get_transaction_rules_transaction_rule_id(connection, transaction_rule_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/transactionRules/#{transaction_rule_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.TransactionRuleResponse{}},
      { 400, %Adyen.Model.RestServiceError{}},
      { 401, %Adyen.Model.RestServiceError{}},
      { 403, %Adyen.Model.RestServiceError{}},
      { 422, %Adyen.Model.RestServiceError{}},
      { 500, %Adyen.Model.RestServiceError{}}
    ])
  end

  @doc """
  patch-transactionRules-transactionRuleId
  Updates a transaction rule.  When updating a transaction rule resource, note that:  * When updating only the `status`, you can send only the `status` parameter. All other parameters not provided in the request are left unchanged.  * When updating any other parameter, you need to send all existing resource parameters. If you omit a parameter in the request, the parameter is removed from the resource.

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - transaction_rule_id (String.t): Unique identifier of the transaction rule.
  - opts (KeywordList): [optional] Optional parameters
    - :body (TransactionRuleInfo): 
  ## Returns

  {:ok, Adyen.Model.TransactionRule.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec patch_transaction_rules_transaction_rule_id(Tesla.Env.client, String.t, keyword()) :: {:ok, Adyen.Model.RestServiceError.t} | {:ok, Adyen.Model.TransactionRule.t} | {:error, Tesla.Env.t}
  def patch_transaction_rules_transaction_rule_id(connection, transaction_rule_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:patch)
    |> url("/transactionRules/#{transaction_rule_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.TransactionRule{}},
      { 400, %Adyen.Model.RestServiceError{}},
      { 401, %Adyen.Model.RestServiceError{}},
      { 403, %Adyen.Model.RestServiceError{}},
      { 422, %Adyen.Model.RestServiceError{}},
      { 500, %Adyen.Model.RestServiceError{}}
    ])
  end

  @doc """
  post-transactionRules
  Creates a transaction rule. Transaction rules define conditions to automatically approve or deny transactions. You can apply transaction rules to a specific payment instrument, a group of payment instruments, or to all the payment instruments in your balance platform.  For more information on how you can set conditions, refer to [Transaction rules](https://docs.adyen.com/issuing/transaction-rules).

  ## Parameters

  - connection (Adyen.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (TransactionRuleInfo): 
  ## Returns

  {:ok, Adyen.Model.TransactionRule.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_transaction_rules(Tesla.Env.client, keyword()) :: {:ok, Adyen.Model.RestServiceError.t} | {:ok, Adyen.Model.TransactionRule.t} | {:error, Tesla.Env.t}
  def post_transaction_rules(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/transactionRules")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Adyen.Model.TransactionRule{}},
      { 400, %Adyen.Model.RestServiceError{}},
      { 401, %Adyen.Model.RestServiceError{}},
      { 403, %Adyen.Model.RestServiceError{}},
      { 422, %Adyen.Model.RestServiceError{}},
      { 500, %Adyen.Model.RestServiceError{}}
    ])
  end
end
